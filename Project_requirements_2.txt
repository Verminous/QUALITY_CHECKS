What I need is:

- There are 4 steps in this process
- 3 first steps are similar in that they build an array based on a requirement, and pass the array to the next step.
- Last step chooses randomly 1 incident from the final array

Diving in:

- 1st step builds an array of incidents, from the total available pool for that agent, that matches the "Service" set in the configuration, and then sends that array to the 2nd step.
- 2nd step builds an array of incidents, from the array received from the 1st step, that matches the "Contact type" set in the configuration, and then sends that array to the 3rd step.
- 3rd step builds an array of incidents, from the array received from the 2nd step, that matches the "First time fix" set in the configuration, and then sends that array to the 4th step.
- 4th step supposedly there will be an array, filtered by steps 1, 2 and 3, with several incidents that all match the configuration line. Here, the 4th step just needs to make sure 1 incident is selected randomly. 

Several aspects regarding failure or return of empty arrays when a step does not find incidents that match the classification (Service, Contact type, First time fix):

- If 1st step fails in finding incidents, from the total pool of incidents for that agent, that match the configured "Service" value sent by UI, it should choose another random "Service" value from the list of available Services, then, if it finds incidents with that randomly chosen "Service" value,  build the array of incidents that match that randomly chosen "Service" value, and pass it to the 2nd step.

- If 2nd step fails in finding incidents, from the array received from the 1st step, that match the configured "Contact type" value sent by UI, it should choose another random "Contact type" value from the list of available contact types, then, if it finds incidents with that randomly chosen "Contact type" value, build the array of incidents that match that randomly chosen "Contact type" value, and pass it to the 3rd step.

- If 3rd step fails in finding incidents, from the array received from the 2nd step, that match the configured "First time fix" value sent by UI, it should choose another random "First time fix" value from the list of available first time fixes, then, if it finds incidents with that randomly chosen "First time fix" value, build the array of incidents that match that randomly chosen "First time fix" value, and pass it to the 4th step.

- 4th step. Here, the 4th step, what is considered a failure, is something else. Here in the 4th step, the 4th step needs to make sure that when it chooses an incident, right before mapping it to the final array that will be published/written to the processed Excel file, the 4th step needs to check if the incident is not a repetition for this agent. That is:
If the incident randomly chosen, was already chosen, for the same agent, in a previous cycle of steps 1, 2, 3, 4, for a previous configuration line, then the 4th step needs to restart the whole cycle for this configuration line steps 1, 2, 3, 4, and start with a different "Service" from the start on the 1st step. 

Here is an example of a configuration sent by the UI:

{
incidentsPerAgent:5,
incidentConfigs:[
{
service:'EMEIAWorkplace',
contactType:'Self-service',
ftf:'RANDOM'
},
{
service:'EMEIAWorkplace',
contactType:'Self-service',
ftf:'RANDOM'
},
{
service:'SecureInternetGateway(GlobalSIG)',
contactType:'RANDOM',
ftf:'FALSE'
},
{
service:'SecureInternetGateway(GlobalSIG)',
contactType:'RANDOM',
ftf:'FALSE'
},
{
service:'IdentityandAccessManagement',
contactType:'Phone',
ftf:'TRUE'
}
],
sfMembers:[
/*namesommited*/
],
agentNames:[
/*namesommited*/
]
}

As you can see, in this configuration, the user selected for each agent to be mapped 5 incidents. Also, the configuration line informs how those 5 incidents should be mapped:

- 2x incidents with "Service'" as "Emeia Workplace", "Contact type" as "Self service" and "First time fix" as "RANDOM"

- 2x incidents with "Service'" as "Secure Internet Gateway (Global SIG)", "Contact type" as "RANDOM" and "First time fix" as "FALSE"

- 1x incident with "Service'" as "Identity and Access Management", "Contact type" as "Phone" and "First time fix" as "TRUE"

Please note that "RANDOM" does not mean that there is a "Service", "Contact type" or "First time fix" value with that name. What it means is, when its set as "RANDOM" in any of the 3 classifications, it means the code should choose randomly from the available list of values for that classification.

Here are the lists:

"Service":
        'EMEIA Workplace',
        'Secure Internet Gateway (Global SIG)',
        'Identity and Access Management',
        'Identity Access Management (Finland)',
        'M365 Teams',
        'M365 Email',
        'M365 Apps',
        'Software Distribution (SCCM)',
        'Ask IT',
        'EMEIA Messaging',
        'Mobile Phones UK',
        'ZinZai Connect',
        'ForcePoint',
        'Network Service (CE/WEMEIA)',
        'M365 Sharepoint'

"Contact type":
        'Self-service',
        'Phone - Unknown User',
        'Phone',
        'Chat'

"First time fix":
        'TRUE',
        'FALSE'

Source data:
Data from an uploaded Excel file. The data is in the 1st sheet in this format:

Task Number	Taken By	Service	Contact type	First time fix
ITI1670786	SERDEÑA, DORELYN	Remote Access (Europe VPN)	Phone	FALSE
ITI1705426	Janiak, Krzysztof	Identity and Access Management	Self-service	TRUE
ITI1702280	Legaspi, Lyra	Local IT - Poland	Self-service	FALSE
ITI1705481	DELOS REYES, JOHN CARLO	EMEIA Workplace	Phone	TRUE
ITI1705694	Neves, Cristina	EMEIA Workplace	Phone	TRUE
ITI1705681	Krawczyk, Anna	EMEIA Messaging	Self-service	FALSE
ITI1704353	GACHE, Jeremiah	File	Self-service	TRUE
ITI1703781	Grabarczyk, Igor	Mobile Phones UK	Self-service	TRUE
ITI1705538	Marques Pisco, Paulo Alexandre	Identity and Access Management	Self-service	TRUE
ITI1705503	Star, Aureliusz	M365 Apps	Self-service	TRUE
ITI1703514	Arango Gomez, Yanquiel	Network Service (CE/WEMEIA)	Chat	FALSE
ITI1680694	Nadjib'llah, Djamal	Secure Internet Gateway (Global SIG)	Self-service	FALSE
ITI1705455	Gadomska, Amelia	M365 Apps	Self-service	TRUE
ITI1694902	Pudlewski, Adrian	Secure Internet Gateway (Global SIG)	Self-service	FALSE
ITI1704977	Palmaria, Erika	Ask IT	Self-service	FALSE
ITI1705707	Kopczyński, Konrad	Identity and Access Management	Phone	TRUE
...


This is just a sample. There are around 11500 rows in that Excel file. 

The file is uploaded, processed and downloaded. 1st sheet remains untouched, even though the data comes from there, and the processed data should be built/written/mapped to a new 2nd sheet, something like this:

SF Member	Agent	Task Number	Service	Contact type	First time fix
Kempa, Martin	Nascimento, Noel	ITI1707415	EMEIA Workplace	Self-service	FALSE
		ITI1708181	EMEIA Workplace	Self-service	TRUE
		ITI1718775	Secure Internet Gateway (Global SIG)	Chat	FALSE
		ITI1715683	Secure Internet Gateway (Global SIG)	Phone - Unknown User	FALSE
		ITI1714992	Identity and Access Management	Phone	TRUE

Conclusion:
What I need help with is, at the moment, JUST the Javascript logic, that will be employed in a node.js backend, that will receive the source data from an uploaded Excel file, and that will be used for processing steps 1, 2, 3 and 4 mentioned above, to select/map/write each incident to an agent.
We need to take into consideration each and every step mentioned, the details, the requirements of those steps regading the rules for mapping, for fallbacks and so on.

DIRECTIVES:
Analise step by step, analitically, each and every single requirement, points and subpoints outlined, and analise, inspect, evaluate, and write the code, that meets 100% the requirements outlined in this document.
Approach this request with the methodologically excruciatingly detailed forensic precision, knowledge, know-how and efficiency, of a world-class renowned senior Software developer and Engineer, specialized in JavaScript and Web Development.

