Option Explicit

Dim BreakAgent As Boolean



Sub Clear()
Dim Incidents
Dim wss As Sheets
Set wss = ThisWorkbook.Worksheets
Set Incidents = wss("Incidents")
Dim i As Integer

For i = 1 To 5
    Incidents.Columns(i).ClearContents
Next

End Sub


Sub Calculate()

Dim i, ii, iii As Integer
Dim agent As Boolean
Dim agentString As String
Dim Agents(100) As String
Dim IsInArray As Boolean
Dim incident As Worksheet
Set incident = ActiveSheet
Dim QCH
Dim cell
Dim Incidents
Dim wss As Sheets
Set wss = ThisWorkbook.Worksheets
Set QCH = wss("QCH")
Set Incidents = wss("Incidents")
Dim no As Boolean


QCH.Columns(1).ClearContents
QCH.Columns(2).ClearContents
i = 1
ii = 1
For Each cell In incident.UsedRange.Columns("B").Cells
agentString = cell.Value
    If ii <> 1 Then
        If Incidents.Cells(ii + 1, 4).Value = "Phone - Unknown User" Then Incidents.Cells(ii + 1, 4).Value = "Phone"
        
    
    
        IsInArray = (UBound(Filter(Agents(), agentString, True, vbBinaryCompare)) > -1)
        If IsInArray = False Then
            'If ii <> 1 Then Incidents.Cells(ii, 6).Value = i
            QCH.Cells(i, 1).Value = cell.Value
            Agents(i) = cell.Value
            i = 1 + i
        'ElseIf ii <> 1 Then
            
            'no = False
            'iii = 1
            'Do While no = False
                'If QCH.Cells(iii, 1).Value = cell.Value Then
                    'no = True
                    'Incidents.Cells(ii, 6) = iii
                'Else
                    'iii = iii + 1
                'End If
                
                'If iii > i Then
                    'MsgBox "Fatal error in incidents list"
                    'Exit Sub
                'End If
                
            'Loop
            
        End If
    End If
ii = ii + 1
    
    
Next cell


End Sub
















Sub Assign_tickets()

Dim wss As Sheets
Dim QCH As Worksheet
Dim Incidents As Worksheet
Dim List As Worksheet
    Set wss = ThisWorkbook.Worksheets
    Set Incidents = wss("Incidents")
    Set QCH = wss("QCH")
    Set List = wss("List")
Dim Agents() As String
Dim AgentsBin() As String
Dim Agentsno As Integer
Dim AgentsFind As Integer
    Agentsno = QCH.Cells(2, 4).Value - 1
    AgentsFind = QCH.Cells(2, 5).Value - 1
    ReDim Agents(Agentsno)
    ReDim AgentsBin(Agentsno)
Dim Support() As String
Dim SupportBin() As String
Dim Supportno As Integer
    Supportno = QCH.Cells(1, 4).Value - 1
    ReDim Support(Supportno)
    ReDim SupportBin(Supportno)
Dim Tickets() As String
Dim TicketsBin() As String
Dim TicketsTemp() As String
Dim TicketsRNG As Integer
Dim Ticketsno As Integer
    Ticketsno = QCH.Cells(3, 4).Value - 1


Dim Rep As Boolean
Dim i, ii, iii As Integer
Dim k, kk, kkk As Integer
Dim m, mm, mmm As Integer
Dim n, nn, nnn As Integer
Dim TicketsOpenedBy As Integer
Dim SupportMod As Integer
Dim SupportRNG As Integer
Dim SupportCalc As String
Dim AgentsRNG As Integer
Dim AgentsCalc As String
Dim AgentsCalcno As Integer
Dim TicketsCalc As String
Dim TicketsSize As Integer
Dim ModCountDown As Integer
Dim Break As Integer
Dim BreakCon As Boolean
Dim BreakCon2 As Boolean

QCH.Columns(6).ClearContents
QCH.Columns(7).ClearContents
List.Columns(1).ClearContents
List.Columns(2).ClearContents
List.Columns(3).ClearContents

For i = 0 To Supportno

    Support(i) = QCH.Cells(i + 2, 3).Value
Next

n = 0
For i = 0 To AgentsFind
    If QCH.Cells(i + 1, 2).Value = "" Then
        Agents(n) = QCH.Cells(i + 1, 1).Value
        n = n + 1
    End If
Next





        
   
ModCountDown = (Agentsno + 1) Mod (Supportno + 1)
SupportMod = ((Agentsno + 1) - ModCountDown) / (Supportno + 1)
m = 2
mm = 2
mmm = 2

For i = 0 To Supportno
    Rep = True
    Do While Rep = True
        SupportRNG = CInt(Rnd * (Supportno))
        SupportCalc = Support(SupportRNG)
        Rep = (UBound(Filter(SupportBin(), SupportCalc, True, vbBinaryCompare)) > -1)
    Loop
    SupportBin(i) = SupportCalc
    
    
    
    If ModCountDown > 0 Then
        k = SupportMod + 1
    Else
        k = SupportMod
    End If
    
    
    
    QCH.Cells(m, 6).Value = SupportCalc
    List.Cells(mmm, 1).Value = SupportCalc
    m = m + k
    
        
        For ii = 0 To k - 1
            Rep = True
            Do While Rep = True
                AgentsRNG = CInt(Rnd * (Agentsno))
                AgentsCalc = Agents(AgentsRNG)
                
                Rep = (UBound(Filter(AgentsBin(), AgentsCalc, True, vbBinaryCompare)) > -1)
            Loop
            AgentsBin(mm - 2) = AgentsCalc
            
            QCH.Cells(mm, 7).Value = AgentsCalc
            List.Cells(mmm, 2).Value = AgentsCalc
            mm = mm + 1
            
            ReDim TicketsBin(9)
            For iii = 0 To 9
            
                Break = 0
                BreakCon = False
                
                BreakAgent = False
                Select Case iii
            
            
            
                Case 0 To 2
                
                    Tickets = TicketType("Self-service", AgentsCalc, Ticketsno)
                    
 
                    If Tickets(0) = "Empty" Then
                        
                        BreakCon = LoopBreak(AgentsCalc, Ticketsno, TicketsBin(), mmm)
                        TicketsBin(iii) = List.Cells(mmm, 3).Value
                    Else
                        Rep = True
                        Do While Rep = True
                        
                        
                        
                            TicketsSize = (UBound(Tickets))
                            TicketsRNG = CInt(Rnd * TicketsSize)
                            TicketsCalc = Tickets(TicketsRNG)
                            
                            Rep = (UBound(Filter(TicketsBin(), TicketsCalc, True, vbBinaryCompare)) > -1)
                            
                            Break = Break + 1
                            
                            If Break > 100 Then
                                BreakCon = LoopBreak(AgentsCalc, Ticketsno, TicketsBin(), mmm)
                                TicketsBin(iii) = List.Cells(mmm, 3).Value
                                Rep = False
                            End If
                            
                
                        Loop
                        
                        If BreakCon <> True Then
                            TicketsBin(iii) = TicketsCalc
                            List.Cells(mmm, 3).Value = TicketsCalc
                            List.Cells(mmm, 4).Value = "Self-service"
                        End If
                        
                    End If
                    
                Case 3
                
                    Tickets = TicketType("Phone", AgentsCalc, Ticketsno)

                    If Tickets(0) = "Empty" Then
                        
                        BreakCon = LoopBreak(AgentsCalc, Ticketsno, TicketsBin(), mmm)
                        TicketsBin(iii) = List.Cells(mmm, 3).Value
                        
                    Else
                        Rep = True
                        Do While Rep = True
                        
                        
                        
                            TicketsSize = (UBound(Tickets))
                            TicketsRNG = CInt(Rnd * TicketsSize)
                            TicketsCalc = Tickets(TicketsRNG)
                            
                            Rep = (UBound(Filter(TicketsBin(), TicketsCalc, True, vbBinaryCompare)) > -1)
                            
                            Break = Break + 1
                            
                            If Break > 100 Then
                                BreakCon = LoopBreak(AgentsCalc, Ticketsno, TicketsBin(), mmm)
                                TicketsBin(iii) = List.Cells(mmm, 3).Value
                                Rep = False
                            End If
                            
                
                        Loop

                        If BreakCon <> True Then
                            TicketsBin(iii) = TicketsCalc
                            List.Cells(mmm, 3).Value = TicketsCalc
                            List.Cells(mmm, 4).Value = "Phone"
                        End If
                        
                    End If
                Case 4
                
                    Tickets = TicketType("Chat", AgentsCalc, Ticketsno)

                    If Tickets(0) = "Empty" Then
                        
                        BreakCon = LoopBreak(AgentsCalc, Ticketsno, TicketsBin(), mmm)
                        TicketsBin(iii) = List.Cells(mmm, 3).Value
                        
                    Else
                        Rep = True
                        Do While Rep = True
                        
                        
                        
                            TicketsSize = (UBound(Tickets))
                            TicketsRNG = CInt(Rnd * TicketsSize)
                            TicketsCalc = Tickets(TicketsRNG)
                            
                            Rep = (UBound(Filter(TicketsBin(), TicketsCalc, True, vbBinaryCompare)) > -1)
                            
                            Break = Break + 1
                            
                            If Break > 100 Then
                                BreakCon = LoopBreak(AgentsCalc, Ticketsno, TicketsBin(), mmm)
                                TicketsBin(iii) = List.Cells(mmm, 3).Value
                                Rep = False
                            End If
                            
                
                        Loop

                        If BreakCon <> True Then
                            TicketsBin(iii) = TicketsCalc
                            List.Cells(mmm, 3).Value = TicketsCalc
                            List.Cells(mmm, 4).Value = "Chat"
                        End If
                        
                    End If
                    
                Case 5 To 6
                
                    Tickets = TicketFTF(AgentsCalc, Ticketsno)

                    If Tickets(0) = "Empty" Then
                        
                        BreakCon = LoopBreak(AgentsCalc, Ticketsno, TicketsBin(), mmm)
                        TicketsBin(iii) = List.Cells(mmm, 3).Value
                        
                    Else
                        Rep = True
                        Do While Rep = True
                        
                        
                        
                            TicketsSize = (UBound(Tickets))
                            TicketsRNG = CInt(Rnd * TicketsSize)
                            TicketsCalc = Tickets(TicketsRNG)
                            
                            Rep = (UBound(Filter(TicketsBin(), TicketsCalc, True, vbBinaryCompare)) > -1)
                            
                            Break = Break + 1
                            
                            If Break > 100 Then
                                BreakCon = LoopBreak(AgentsCalc, Ticketsno, TicketsBin(), mmm)
                                TicketsBin(iii) = List.Cells(mmm, 3).Value
                                Rep = False
                            End If
                            
                
                        Loop

                        If BreakCon <> True Then
                            TicketsBin(iii) = TicketsCalc
                            List.Cells(mmm, 3).Value = TicketsCalc
                            List.Cells(mmm, 4).Value = "FTF"
                        End If
                        
                    End If
                    
                Case 7 To 9
                    Tickets = TicketTransfer(AgentsCalc, Ticketsno)

                    If Tickets(0) = "Empty" Then
                        
                        BreakCon = LoopBreak(AgentsCalc, Ticketsno, TicketsBin(), mmm)
                        TicketsBin(iii) = List.Cells(mmm, 3).Value
                        
                    Else
                        Rep = True
                        Do While Rep = True
                        
                        
                        
                            TicketsSize = (UBound(Tickets))
                            TicketsRNG = CInt(Rnd * TicketsSize)
                            TicketsCalc = Tickets(TicketsRNG)
                            
                            Rep = (UBound(Filter(TicketsBin(), TicketsCalc, True, vbBinaryCompare)) > -1)
                            
                            Break = Break + 1
                            
                            If Break > 100 Then
                                BreakCon = LoopBreak(AgentsCalc, Ticketsno, TicketsBin(), mmm)
                                TicketsBin(iii) = List.Cells(mmm, 3).Value
                                Rep = False
                            End If
                            
                
                        Loop

                        If BreakCon <> True Then
                            TicketsBin(iii) = TicketsCalc
                            List.Cells(mmm, 3).Value = TicketsCalc
                            List.Cells(mmm, 4).Value = "Transfer Count"
                        End If
                        
                    End If
                
                
                Case Else
                    
                    MsgBox "Error, ticket loop"
                    Exit Sub
            
                End Select
                
                mmm = mmm + 1
            Next
            
            
            
            
            
            
            
            
        Next
      
    ModCountDown = ModCountDown - 1
Next

End Sub

Function TicketType(TicketT As String, Name As String, Limit As Integer) As String()
    Dim TicketsTemp() As String
    Dim TicketsTemp2() As String
        ReDim TicketsTemp(Limit)
    Dim TicketsOpenedBy As Integer
        TicketsOpenedBy = 0
    Dim wss As Sheets
    Dim QCH As Worksheet
    Dim Incidents As Worksheet
    Dim List As Worksheet
        Set wss = ThisWorkbook.Worksheets
        Set Incidents = wss("Incidents")
        Set QCH = wss("QCH")
        Set List = wss("List")
    Dim i As Integer
        
        
        
        For i = 0 To Limit + 2

        If Incidents.Cells(i + 2, 3).Value = 1 And Incidents.Cells(i + 2, 4).Value = TicketT And Incidents.Cells(i + 2, 2).Value = Name Then
           
            TicketsTemp(TicketsOpenedBy) = Incidents.Cells(i + 2, 1).Value
            TicketsOpenedBy = TicketsOpenedBy + 1
    
        End If
        
        Next
    
    
    If TicketsOpenedBy = 0 Then
        ReDim TicketsTemp2(1)
        TicketsTemp2(0) = "Empty"
        TicketType = TicketsTemp2
        Exit Function
    End If
    
    
    
    ReDim TicketsTemp2(TicketsOpenedBy - 1)
    For i = 0 To (TicketsOpenedBy - 1)
        TicketsTemp2(i) = TicketsTemp(i)
    Next
    TicketType = TicketsTemp2

End Function




Function TicketFTF(Name As String, Limit As Integer) As String()
    Dim TicketsTemp() As String
    Dim TicketsTemp2() As String
        ReDim TicketsTemp(Limit)
    Dim TicketsOpenedBy As Integer
        TicketsOpenedBy = 0
    Dim wss As Sheets
    Dim QCH As Worksheet
    Dim Incidents As Worksheet
    Dim List As Worksheet
        Set wss = ThisWorkbook.Worksheets
        Set Incidents = wss("Incidents")
        Set QCH = wss("QCH")
        Set List = wss("List")
    Dim i As Integer
        
        
        
        For i = 0 To Limit + 2

        If Incidents.Cells(i + 2, 3).Value = 1 And Incidents.Cells(i + 2, 5).Value = True And Incidents.Cells(i + 2, 2).Value = Name Then
           
            TicketsTemp(TicketsOpenedBy) = Incidents.Cells(i + 2, 1).Value
            TicketsOpenedBy = TicketsOpenedBy + 1
    
        End If
        
        Next
    
    
    If TicketsOpenedBy = 0 Then
        ReDim TicketsTemp2(1)
        TicketsTemp2(0) = "Empty"
        TicketFTF = TicketsTemp2
        Exit Function
    End If
    
    

    ReDim TicketsTemp2(TicketsOpenedBy - 1)
    For i = 0 To (TicketsOpenedBy - 1)
        TicketsTemp2(i) = TicketsTemp(i)
    Next
    TicketFTF = TicketsTemp2
        


End Function






Function TicketTransfer(Name As String, Limit As Integer) As String()
    Dim TicketsTemp() As String
    Dim TicketsTemp2() As String
        ReDim TicketsTemp(Limit)
    Dim TicketsOpenedBy As Integer
        TicketsOpenedBy = 0
    Dim Rep()
        ReDim Rep(Limit)
    Dim wss As Sheets
    Dim QCH As Worksheet
    Dim Incidents As Worksheet
    Dim List As Worksheet
        Set wss = ThisWorkbook.Worksheets
        Set Incidents = wss("Incidents")
        Set QCH = wss("QCH")
        Set List = wss("List")
    Dim i As Integer
        
        
        
        For i = 0 To Limit + 2

        If Incidents.Cells(i + 2, 3).Value <> 1 And Incidents.Cells(i + 2, 2).Value = Name Then
            
            
           
            TicketsTemp(TicketsOpenedBy) = Incidents.Cells(i + 2, 1).Value

            TicketsOpenedBy = TicketsOpenedBy + 1
            
    
        End If
        
        Next
        
        
    If TicketsOpenedBy = 0 Then
        ReDim TicketsTemp2(1)
        TicketsTemp2(0) = "Empty"
        TicketTransfer = TicketsTemp2
        Exit Function
    End If
    
    ReDim TicketsTemp2(TicketsOpenedBy - 1)
    For i = 0 To (TicketsOpenedBy - 1)
        TicketsTemp2(i) = TicketsTemp(i)
    Next
    TicketTransfer = TicketsTemp2
        


End Function


Function LoopBreak(Name As String, Limit As Integer, Bin() As String, row As Integer) As Boolean
    Dim RNG As Integer
    Dim Check As String
    Dim Rep As Boolean
        Rep = True
    Dim i As Integer
        i = 2
        
    Dim wss As Sheets
    Dim QCH As Worksheet
    Dim Incidents As Worksheet
    Dim List As Worksheet
        Set wss = ThisWorkbook.Worksheets
        Set Incidents = wss("Incidents")
        Set QCH = wss("QCH")
        Set List = wss("List")
        
LoopBreak = True

If BreakAgent = True Then
    List.Cells(row, 3).Value = "Not enough tickets"
    List.Cells(row, 4).Value = "Not enough tickets"
    Exit Function
End If

                    Do While Rep = True


                        If Incidents.Cells(i, 2).Value = Name Then
                            Check = Incidents.Cells(i, 1).Value
                            Rep = (UBound(Filter(Bin(), Check, True, vbBinaryCompare)) > -1)
                        Else
                            Rep = True
                        End If
                        i = i + 1

                        If i > Limit Then
                            BreakAgent = True
                            List.Cells(row, 3).Value = "Not enough tickets"
                            List.Cells(row, 4).Value = "Not enough tickets"
                            Exit Function
                        End If
                        
                        
                    Loop
                    
List.Cells(row, 3).Value = Check
List.Cells(row, 4).Value = "Random"

        


End Function

